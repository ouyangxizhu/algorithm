package primary.arrayy;
/**
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。
 * @author ouyangxizhu
 *将无论一行，一列，一个格子的数都变成i，j，k行九个，num表示1-9 中的第几个位置也表示board里面的数字大小    数组的数字表示是不是已经出现过了
 */
public class Ten {
	public boolean isValidSudoku(char[][] board) {
		boolean [][] row = new boolean [board.length][board.length];
		boolean [][] col= new boolean [board.length][board.length];
		boolean [][] box = new boolean [board.length][board.length];
		for (int i = 0;i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++) {
				if (board[i][j]!='.') {
					int num = board[i][j]-'0'-1;
					int k = i/3*3+j/3;
					if (row[i][num]||col[j][num]||box[k][num]) {
						return false;
					}
					row[i][num]=col[j][num]=box[k][num]=true;
				}
			}
		}
		return true;
    }

}

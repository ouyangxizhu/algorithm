package midmid.sortsort;
/**
 * 搜索旋转排序数组
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 O(log n) 级别。

示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4
示例 2:

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1
 * @author ouyangxizhu
 *
 */
public class Seven {
	 public int search(int[] nums, int target) {
		//实际上就是两个递增序列，依旧是二分法
         //只不过只在递增序列中二分
         if(nums.length==0){
             return -1;
         }
         int st = 0,end = nums.length-1;
         while(st <= end){
             int mid = st+(end-st)/2;
             if(nums[mid]==target){
                 return mid;
             }
             if(nums[mid]>=nums[st]){
                 if(nums[st]<=target&&target<nums[mid]){
                     end = mid-1;
                 }else{
                     st = mid+1;
                 }
             }else{
                 if(nums[mid]<target&&target<=nums[end]){
                     st = mid+1;
                 }else{

                     end = mid-1;
                 }
             }
         }
         return -1;

	        
	 }

}
